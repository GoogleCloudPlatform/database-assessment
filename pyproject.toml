[tool.poetry]
authors = ["Eri Santos <erisantos@google.com>","Cody Fincher <codyfincher@google.com>"]
maintainers = ["Cody Fincher <codyfincher@google.com>"]
description =  "A tool to enable collection of data from Oracle databases for homogeneous and heterogeneous database migration assessment"
license = "Apache"
name = "db-migration-advisor"
readme = "README.md"
homepage = "https://github.com/GoogleCloudPlatform/oracle-database-assessment"
repository = "https://github.com/GoogleCloudPlatform/oracle-database-assessment"
documentation = "https://github.com/GoogleCloudPlatform/oracle-database-assessment"
keywords = ["db_assessment","gcp","google","databases","cloud"]
classifiers = [
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Operating System :: OS Independent",
]
packages = [{include = "db_assessment", from = "src/server"},{include = "dbma", from = "src/server"}]
version = "4.0.0"

[tool.poetry.scripts]
dbma = "dbma.__main__:main"
optimus-prime = "db_assessment.optimusprime:main"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
duckdb = "*"
duckdb-engine = "*"
aiosql = "*"
pydantic = {version="*", extras=["dotenv","typing_extensions","email"]}
typer = "*"
sqlalchemy = "*"
sqlalchemy-bigquery = "*"
rich = "*"
protobuf = ">=4.0.0"
orjson = "*"
httpx = "*"
google-api-core ="*"
google-cloud-bigquery = ">=1.28.0"
google-cloud-secret-manager = "*"
google-resumable-media = ">=2.0.0"
google-cloud-storage = "*"
numpy ="*"
pandas ="*"
pyarrow ="*"
flask ="*"
gunicorn ="*"
gcsfs = ">=2022.8.2"
fsspec = ">=2022.8.2"
universal_pathlib = "*"
beautifultable ="*"
requests = "*"

# [tool.poetry.group.legacy.dependencies]
# beautifultable ="*"
# requests = "*"

# [tool.poetry.group.legacy]
# optional = false
functions-framework = "^3.2.0"

[tool.poetry.group.dev.dependencies]
bump2version = "*"
coverage = {extras = ["toml"], version = "*"}
cython = "*"
pytest = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-mock = "*"
invoke = "*"
ipython-sql = "*"
ipython = "*"
ipykernel = "*"
notebook = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"


[tool.poetry.group.linting]
optional = true

[tool.poetry.group.linting.dependencies]
pre-commit = "*"
isort = "*"
pylint = "*"
mypy = "*"
types-click = "*"
types-freezegun = "*"
types-pyyaml = "*"
types-requests = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-comprehensions = "*"
flake8-mutable = "*"
flake8-print = "*"
flake8-simplify = "*"
flake8-type-checking = "*"
freezegun = "*"
pyupgrade = "*"
autoflake = "*"
bandit = "*"
black = "*"
slotscheck = "*"
blacken-docs = "*"
pandas-stubs = "*"
sqlalchemy2-stubs = "*"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "setuptools", "wheel", "cython"]

[tool.autoflake]
check = true

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.isort]
line_length = 119
multi_line_output = 3
profile = "black"
skip = [ ".venv"]
skip_gitignore = true
src_paths = ["src/server" ]

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == '__main__':",
]
show_missing = true

[tool.coverage.run]
omit = [
  "tests/server/*",
 ]

[tool.pytest.ini_options]
addopts = "--cov=opdba -v --doctest-modules --doctest-glob=*.md --ignore=gunicorn.conf.py --ignore=alembic"
asyncio_mode = "auto"
env_files = [".env.example"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601", "B608"]
tests = ["B201", "B301", "B101"]
