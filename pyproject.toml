[project]
authors = [{ name = "Cody Fincher", email = "codyfincher@gmail.com" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development",
  "Typing :: Typed",
]
dependencies = [
  "duckdb>=0.9.2",
  "aiosql>=9.4",
  "click>=8.1.7",
  "rich-click>=1.7.3",
  "jinja2>=3.1.3",
  "sqlalchemy>=2.0.25",
  "typing-extensions>=4.0.0",
  "greenlet; sys_platform == \"darwin\"",
]
description = "Database Migration Assessment."
keywords = ["database", "migration", "dma"]
license = { text = "MIT" }
name = "dma"
readme = "README.md"
requires-python = ">=3.8"
version = "5.0.0"

[project.scripts]
dma = "dma.__main__:run_cli"

[project.optional-dependencies]
mssql = ["aioodbc"]
mysql = ["asyncmy>=0.2.9"]
oracle = ["oracledb"]
postgres = ["asyncpg>=0.29.0"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "nodeenv"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
dev-mode-dirs = ["src/"]
exclude = ["resources/", "tests", "docs/", "scripts/"]
include = ["src/dma/collector/sql/**/*"]
packages = ["src/dma"]

[tool.pdm]
plugins = ["pdm-packer", "pdm-shell"]

[tool.pdm.scripts]
lint = "pdm run pre-commit run --all-files"
post_install = "pdm run python scripts/pre-build.py --install-packages"
pre_build = "pdm run python scripts/pre-build.py --build-assets"
start-infra = "docker-compose -f tests/docker-compose.yml up --force-recreate -d"
stop-infra = "docker-compose -f tests/docker-compose.yml down --remove-orphans"
test = "pdm run pytest tests"
test_coverage = { composite = ["pdm run pytest tests", "pdm run coverage html", "pdm run coverage xml"] }

[tool.pdm.dev-dependencies]
dev = ["nodeenv", "bump2version", "anyio"]
docs = ['mkdocs', 'mkdocs-material', 'mkdocstrings', 'mkdocstrings-python']
linting = ["pre-commit", "mypy", "ruff", "types-click", "types-pyyaml", "pylint", "sqlfluff", "asyncpg-stubs"]
test = ["pytest", "pytest-mock", "pytest-cov", "coverage", "pytest-click", "pytest-xdist", "pytest-mock"]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
omit = ["tests/*", "scripts/*"]
parallel = true

[tool.pytest.ini_options]
addopts = ["--dist", "loadgroup", "-n", "auto"]
filterwarnings = ["ignore::DeprecationWarning:pkg_resources"]
markers = [
  "mysql: MySQL Tests",
  "postgres: Postgres Tests",
  "oracle: Oracle Tests",
  "spanner: Google Cloud Spanner Tests",
  "duckdb: DuckDB Tests",
  "mssql: Microsoft SQL Server Tests",
]
testpaths = ["tests"]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
]
fix = true
line-length = 120
lint.ignore = [
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "ANN102",
  "ANN101",  # ruff - Missing type annotation for `self` in method
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  'PT004',
  'PT005',
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "ANN102",
  "ANN101",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
unsafe-fixes = true
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src", "tests/"]
target-version = "py38"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
  "pydantic.field_validator",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]


[tool.ruff.lint.isort]
known-first-party = ['tests', 'dma', 'scripts']

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"scripts/*.py" = ["INP001"]
"scripts/masker/dma-collection-masker" = ["PYI024", "FA100", "S202", "S311"]
"scripts/post-build.py" = ["ERA001"]
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
plugins = []
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = ["tests.*"]


[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "aiohttp.*",
  "fsspec.*",
  "gcsfs.*",
  "jsbeautifier",
  "jsbeautifier.*",
  "pyarrow.*",
  "re2.*",
  "saq.*",
  "sqlalchemy.*",
  "uvicorn.*",
  "asyncmy",
  "pyodbc",
  "google.auth.*",
  "google.cloud.*",
  "google.protobuf.*",
  "pyarrow.*",
  "pytest_docker.*",
  "googleapiclient",
  "googleapiclient.*",
  "uuid_utils",
  "uuid_utils.*",
  "aioodbc.*",
  "uvloop.*",
  "uvloop.*",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["pyspark.sql.connect.proto", "pyspark.sql.connect.proto.*", "scripts.*"]

[tool.pyright]
include = ["src/dma", "tests"]
