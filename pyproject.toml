[tool.poetry]
authors = ["Eri Santos <erisantos@google.com>", "Cody Fincher <codyfincher@google.com>"]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Operating System :: OS Independent",
]
description = "A tool to enable collection of data from Oracle databases for homogeneous and heterogeneous database migration assessment"
documentation = "https://github.com/GoogleCloudPlatform/oracle-database-assessment"
homepage = "https://github.com/GoogleCloudPlatform/oracle-database-assessment"
keywords = ["db_assessment", "gcp", "google", "databases", "cloud"]
license = "Apache"
maintainers = ["Cody Fincher <codyfincher@google.com>"]
name = "db-migration-advisor"
packages = [{include = "db_assessment", from = "src/server"}, {include = "dbma", from = "src/server"}]
readme = "README.md"
repository = "https://github.com/GoogleCloudPlatform/oracle-database-assessment"
version = "3.0.8"

[tool.poetry.scripts]
dbma = "dbma.__main__:main"
optimus-prime = "db_assessment.optimusprime:main"

[tool.poetry.dependencies]
aiosql = "*"
beautifultable = "*"
duckdb = "*"
duckdb-engine = "*"
flask = "*"
fsspec = ">=2022.8.2"
functions-framework = ">=3.2.0"
gcsfs = ">=2022.8.2"
google-api-core = "*"
google-cloud-bigquery = ">=1.28.0"
google-cloud-secret-manager = "*"
google-cloud-storage = "*"
google-resumable-media = ">=2.0.0"
gunicorn = "*"
httpx = "*"
invoke = "*"
numpy = "*"
orjson = "*"
pandas = "*"
protobuf = ">=4.0.0"
pyarrow = "*"
pydantic = {version = ">=1.9.0", extras = ["dotenv", "typing_extensions", "email"]}
python = ">=3.8,<3.11"
requests = "*"
rich = "*"
sqlalchemy = {version = ">=1.4.42", allow-prereleases = true}
sqlalchemy-bigquery = {git = "https://github.com/googleapis/python-bigquery-sqlalchemy.git", branch = "version-fix"}
typer = "*"
universal_pathlib = "*"

[tool.poetry.group.dev.dependencies]
bump2version = "*"
coverage = {extras = ["toml"], version = "*"}
cython = "*"
invoke = "*"
ipykernel = "*"
ipython = "*"
ipython-sql = "*"
notebook = "*"
pytest = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-mock = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"

[tool.poetry.group.linting]
optional = true

[tool.poetry.group.linting.dependencies]
autoflake = "*"
bandit = "*"
black = "*"
blacken-docs = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-comprehensions = "*"
flake8-mutable = "*"
flake8-print = "*"
flake8-simplify = "*"
flake8-type-checking = "*"
freezegun = "*"
isort = "*"
mypy = "*"
pandas-stubs = "*"
pre-commit = "*"
pylint = "*"
pyupgrade = "*"
slotscheck = "*"
sqlalchemy2-stubs = "*"
types-click = "*"
types-freezegun = "*"
types-pyyaml = "*"
types-requests = "*"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "setuptools", "wheel", "cython"]

[tool.autoflake]
check = true

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.isort]
line_length = 119
multi_line_output = 3
profile = "black"
skip = [".venv"]
skip_gitignore = true
src_paths = ["src/server"]

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == '__main__':",
]
show_missing = true

[tool.coverage.run]
omit = [
  "tests/server/*",
]

[tool.pytest.ini_options]
addopts = "--cov=opdba -v --doctest-modules --doctest-glob=*.md --ignore=gunicorn.conf.py --ignore=alembic"
asyncio_mode = "auto"
env_files = [".env.example"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601", "B608"]
tests = ["B201", "B301", "B101"]
