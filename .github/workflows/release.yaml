# Copyright 2024 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: release

on:
#   push:
#     tags:
#     - v*
#     branches:
#     - master
#   pull_request:
#     branches:
#     - master
  release:
    types:
      - created
concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  STABLE_PYTHON_VERSION: "3.12"

jobs:
  collection-scripts:
    name: Package collections scripts for release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
            # Fetch all tags
            fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install ${{ env.STABLE_PYTHON_VERSION }}

      - name: Building & Package Collector
        run: make clean && make build-collector
      - uses: actions/upload-artifact@v4
        with:
            name: collections
            path: dist/*.zip
            if-no-files-found: error
            overwrite: true

  pure-python-wheel-and-sdist:
    name: Build a pure Python wheel and source distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        # Fetch all tags
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install ${{ env.STABLE_PYTHON_VERSION }}

    - name: Build
      run: uv build

    - uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: dist/*
        if-no-files-found: error
        overwrite: true

  build-binaries:
    name: Build binary for ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs:
        - pure-python-wheel-and-sdist
    strategy:
      fail-fast: false
      matrix:
        job:
        # Linux - GNU libc (manylinux2014 baseline: glibc 2.17+)
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          artifact: dma-x86_64-linux-gnu

        - target: aarch64-unknown-linux-gnu
          os: ubuntu-latest
          artifact: dma-aarch64-linux-gnu

        # Linux - musl (Alpine, static linking)
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          artifact: dma-x86_64-linux-musl

        # macOS
        - target: x86_64-apple-darwin
          os: macos-latest
          artifact: dma-x86_64-macos

        - target: aarch64-apple-darwin
          os: macos-latest
          artifact: dma-aarch64-macos

        # Windows
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          artifact: dma-x86_64-windows.exe

    env:
      PYAPP_REPO: pyapp
      PYAPP_VERSION: v0.27.0
      PYAPP_PYTHON_VERSION: "3.12"

      # CRITICAL: Correct offline configuration (NO PYAPP_UV_ENABLED)
      PYAPP_DISTRIBUTION_EMBED: "true"
      PYAPP_FULL_ISOLATION: "true"
      PYAPP_SKIP_INSTALL: "true"  # Project already embedded
      PYAPP_PROJECT_FEATURES: "oracle,postgres,mssql,mysql,server"
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Clone PyApp
      run: git clone --depth 1 --branch ${{ env.PYAPP_VERSION }} https://github.com/ofek/pyapp ${{ env.PYAPP_REPO }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install ${{ env.STABLE_PYTHON_VERSION }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.job.target }}

    - name: Setup cross-compilation (Linux)
      if: contains(matrix.job.target, 'linux')
      uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: ${{ matrix.job.target }}

    - name: Install musl tools (musl targets)
      if: contains(matrix.job.target, 'musl')
      run: sudo apt-get install --yes musl musl-dev musl-tools

    - name: Download wheel artifact
      uses: actions/download-artifact@v5
      with:
        name: wheels
        path: dist/
        merge-multiple: true

    - name: Get version
      id: version
      run: |
        VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Build PyApp binary
      working-directory: ${{ env.PYAPP_REPO }}
      env:
        PYAPP_PROJECT_PATH: ${{ github.workspace }}/dist/dma-${{ steps.version.outputs.VERSION }}-py3-none-any.whl
      run: cargo build --release --target ${{ matrix.job.target }}

    - name: Rename binary (Unix)
      if: runner.os != 'Windows'
      run: |
        cp ${{ env.PYAPP_REPO }}/target/${{ matrix.job.target }}/release/pyapp ${{ matrix.job.artifact }}
        chmod +x ${{ matrix.job.artifact }}

    - name: Rename binary (Windows)
      if: runner.os == 'Windows'
      run: |
        cp ${{ env.PYAPP_REPO }}/target/${{ matrix.job.target }}/release/pyapp.exe ${{ matrix.job.artifact }}

    - name: Test binary offline (Linux)
      if: contains(matrix.job.target, 'linux') && !contains(matrix.job.target, 'musl')
      run: |
        # Test in network-isolated container
        docker run --network none -v $(pwd):/app ubuntu:20.04 /app/${{ matrix.job.artifact }} --version

    - name: Test binary (macOS/Windows)
      if: runner.os != 'Linux'
      run: ./${{ matrix.job.artifact }} --version

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.job.artifact }}
        path: ${{ matrix.job.artifact }}
        if-no-files-found: error

  publish:
    name: Publish release
    needs:
    - collection-scripts
    - pure-python-wheel-and-sdist
    - build-binaries
    runs-on: ubuntu-latest
    permissions:
     contents: write
    steps:
    - uses: actions/download-artifact@v5
      with:
        path: dist
        merge-multiple: true

    # - name: Push build artifacts to PyPI
    #   uses: pypa/gh-action-pypi-publish@v1.6.4
    #   with:
    #     skip_existing: true
    #     user: __token__
    #     password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Add assets to release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
